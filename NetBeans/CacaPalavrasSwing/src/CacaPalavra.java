/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author paulo
 */
import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;

public class CacaPalavra extends javax.swing.JFrame {

    /**
     * Creates new form CacaPalavra
     */
    public CacaPalavra() {
        initComponents();
        busca.setVisible(false);
        buscar.setVisible(false);
        b.setVisible(false);
        btnDesistir.setVisible(false);
        comeco.setVisible(false);
        fim.setVisible(false);
        linhaC.setVisible(false);
        linhaF.setVisible(false);
        colunaC.setVisible(false);
        colunaF.setVisible(false);
        tipo.setVisible(false);
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        comeca = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        l = new javax.swing.JTextArea();
        busca = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        b = new javax.swing.JLabel();
        btnDesistir = new javax.swing.JButton();
        lvl = new javax.swing.JComboBox<>();
        tipo = new javax.swing.JLabel();
        creditos = new javax.swing.JLabel();
        comeco = new javax.swing.JLabel();
        linhaC = new javax.swing.JLabel();
        colunaC = new javax.swing.JLabel();
        fim = new javax.swing.JLabel();
        linhaF = new javax.swing.JLabel();
        colunaF = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tela De Jogo");

        comeca.setText("Começar");
        comeca.setMaximumSize(new java.awt.Dimension(75, 10));
        comeca.setMinimumSize(new java.awt.Dimension(75, 10));
        comeca.setPreferredSize(new java.awt.Dimension(75, 10));
        comeca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comecaActionPerformed(evt);
            }
        });

        l.setEditable(false);
        l.setColumns(20);
        l.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        l.setRows(5);
        l.setText("Aguardando caça-palavras...");
        jScrollPane1.setViewportView(l);

        busca.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        b.setFont(new java.awt.Font("Norasi", 0, 14)); // NOI18N
        b.setText("Sua busca:");

        btnDesistir.setText("Desistir");
        btnDesistir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesistirActionPerformed(evt);
            }
        });

        lvl.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lvl.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1- Nível Goiabinha", "2- Goiabinha master", "3- Daniel" }));
        lvl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lvlActionPerformed(evt);
            }
        });

        tipo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        creditos.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        creditos.setText("© PID");

        comeco.setText("[Começo]");

        linhaC.setText("Linha:");

        colunaC.setText("Coluna:");

        fim.setText("[Fim]");

        linhaF.setText("Linha:");

        colunaF.setText("Coluna:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comeco)
                                    .addComponent(fim)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(linhaC)
                                            .addComponent(colunaC)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(colunaF)
                                    .addComponent(linhaF))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(creditos))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(busca, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(comeca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lvl, 0, 214, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDesistir, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(tipo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(b)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(busca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buscar)
                            .addComponent(btnDesistir, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(comeca, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lvl, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comeco)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(linhaC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colunaC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fim)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(linhaF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colunaF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(creditos))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
  
    
    private final char[][] m = LeitorMatriz.recuperaMatriz("matriz.txt");
    
    private void imprimeMatriz() {
        
        l.setText("    ");
        
        // Imprimindo números colunas
        
        for (int i = 0; i < m[0].length; i++) {
            
            if (i < 10) l.setText(l.getText().concat(" " + i + " "));
            else l.setText(l.getText().concat(" " + i));
            
        }
        
        l.setText(l.getText().concat("\n"));
        
	for (int i = 0; i < m.length; i++) {
            
            if (i < 10) l.setText(l.getText().concat(Integer.toString(i)) + "  - ");
            else l.setText(l.getText().concat(Integer.toString(i)) + " - ");
            
            for (int j = 0; j < m[1].length; j++) {
                
                String txtAnt = l.getText();
  
                l.setText(txtAnt.concat(Character.toString(m[i][j]).toLowerCase() + "  "));
            
            }
            
            l.setText(l.getText().concat("\n"));
        
        }
        
        System.out.println("*imprimeMatriz() executada.\n");
        
    }
    
    /*private void imprimeMatrizFinal() {
        
        System.out.println("*imprimeMatrizFinal() iniciada.");
        
        StringBuilder sb = new StringBuilder("    ");
        
        // Imprimindo números colunas
        
        for (int i = 0; i < m[0].length; i++) {
            
            //sb.append(l.getText());
            
            if ((i == linhaComeco) || (i == linhaFim))  {
                
                sb.append("(");
                sb.append(i);
                sb.append(")");      
                
            } 
            else {
                
                sb.append(i);
                
            }
            
            if (i < 10) l.setText(sb.append(" " + i + " ").toString());
            else l.setText(sb.append(" " + i).toString());
            
        }
        
        l.setText(l.getText().concat("\n"));
        
	for (int i = 0; i < m.length; i++) {
            
            if ((i == linhaComeco) || (i == linhaFim))  {
                
                sb.append("(");
                sb.append(i);
                sb.append(")");      
                
            } 
            else {
                
                sb.append(i);
                
            }
            
            if (i < 10) l.setText(sb.append("  - ").toString());
            else l.setText(sb.append(" - ").toString());
            
            for (int j = 0; j < m[1].length; j++) {
                
                String txtAnt = l.getText();
  
                l.setText(txtAnt.concat(Character.toString(m[i][j]).toLowerCase() + "  "));
            
            }
            
            l.setText(l.getText().concat("\n"));
        
        }
        
        System.out.println("*imprimeMatriz() executada.\n");
        
    }*/
    
    
    	
    private static String converteLinhaString(char[] linha) {
	
        StringBuilder linhaMatriz = new StringBuilder();
		
	for (int i = 0; i < linha.length; i++) {
            
            linhaMatriz.append(linha[i]);
	
        }
        
	return linhaMatriz.toString();
        
    }
    
    private static String converteColunaString(char[][] m,int coluna) {
        
        StringBuilder colunaMatriz = new StringBuilder();
        
        for (int i = 0; i < m.length; i++) {

            colunaMatriz.append(m[i][coluna]);     

        }
        
        return colunaMatriz.toString();
    
    }
     
    private static String converteDiagonalPrincipalString(char[][] m,int linha, int coluna) {
        
        StringBuilder diagonal = new StringBuilder();
        
        int indexColunas = m[linha].length - coluna;
        int indexLinhas = m.length - linha;
        
        int tamanhoDiagonal = (indexColunas <= indexLinhas)? indexColunas:indexLinhas;
        
                
        for (int i = 0; i < tamanhoDiagonal; i++) {
            
            diagonal.append(m[linha][coluna]);
            
            ++linha;
            ++coluna;
            
        }
        
        return diagonal.toString();
        
    }
    
    private static String converteDiagonalSecundariaString(char[][] m, String palavra,int linha, int coluna) {
        
        StringBuilder diagonal = new StringBuilder();
        
        int tamanhoDiagonal = 1;
        
        if (((coluna + 1 - palavra.length()) >= 0) && ((m.length - linha) >= palavra.length())) {
            
            tamanhoDiagonal = palavra.length();
        
        }
        
        for (int i = 0; i < tamanhoDiagonal; i++) {
            
            diagonal.append(m[linha][coluna]);
             
            ++linha;
            --coluna;
        }
        
        return diagonal.toString(); 
    }
    
    
    
    private static int linhaComeco = 0;
    private static int linhaFim = 0;
    private static int colunaComeco = 0;
    private static int colunaFim = 0;
    private static boolean achou = false;
    
    private static void insereSituacao(int lComeco, int cComeco, int lFim, int cFim) {
        
        linhaComeco = lComeco;
        linhaFim = lFim;
        colunaComeco = cComeco;
        colunaFim = cFim;
          
    }
    
    
    
    
    
    private void linhaNormal(char[][] m, String palavra) {
	
        System.out.println("*linhaNormal() iniciada.-----------------------------\n");
	
        for (int i = 0; i < m.length; i++) {
            
            String linhaMatriz = converteLinhaString(m[i]);
            
            if(linhaMatriz.contains(palavra.toUpperCase())) {
                
                System.out.printf("**linhaMatriz(%d) contém: %s\n",i,palavra);
            
                int cComeco = linhaMatriz.indexOf(palavra.toUpperCase());
                
                insereSituacao(i, cComeco, i, cComeco + palavra.length()-1);
                
                //System.out.printf("\n*linhaNormal() finalizada.-----------------------------\n\n");
                tipo.setText("Linha Normal");
                achou = true;
                break;
                
            } else {
                
                System.out.printf("Não foi encontrado [%s] em linhaMatriz(%d).\n", palavra, i);
                
            }
	}
        
        System.out.println("\n*linhaNormal() finalizada.-----------------------------\n\n");
        
    }
	
    private void linhaInvertida(char[][] m, String palavra) {
	
        System.out.println("*linhaInvertida() iniciada.-----------------------------\n");
        
        StringBuilder aux = new StringBuilder(palavra);
	
        palavra = aux.reverse().toString();
		
	for (int i = 0; i < m.length; i++) {
            
            String linhaMatriz = converteLinhaString(m[i]);
            
            if(linhaMatriz.contains(palavra.toUpperCase())) {
                
                System.out.printf("**linhaMatriz(%d) contém: %s\n\n",i,palavra);
                
                int cComeco = linhaMatriz.indexOf(palavra.toUpperCase());
                
                insereSituacao(i, cComeco + palavra.length()-1, i, cComeco); 
                
//                /System.out.printf("\n*linhaInvertida() finalizada.-----------------------------\n");
                tipo.setText("Linha Invertida");
                achou = true;
                break;
            
            } else {
                
                System.out.printf("Não foi encontrado [%s] em linhaMatriz(%d).\n", palavra, i);
                
            }
	}
        
        System.out.println("\n*linhaInvertida() finalizada.-----------------------------\n");

    }
    
    
    
    
    
    private void colunaNormal(char[][] m, String palavra){
        
        System.out.println("*colunaNormal() iniciada.-----------------------------\n");

	for (int i = 0; i < m[i].length; i++) {
            
            String colunaMatriz = converteColunaString(m, i);
            
            if(colunaMatriz.contains(palavra.toUpperCase())) {
                
                System.out.printf("**colunaMatriz(%d) contém: %s\n\n",i,palavra);
                
                int cComeco = colunaMatriz.indexOf(palavra.toUpperCase());
                
                insereSituacao(cComeco, i , cComeco + palavra.length()-1, i); 
                
                //System.out.printf("\n*colunaNormal() finalizada.-----------------------------\n");
                tipo.setText("Coluna Normal");
                achou = true;
                break;
                
            } else {
                
                System.out.printf("Não foi encontrado [%s] em colunaMatriz(%d).\n", palavra, i);
                
            }
        }
        
        System.out.println("\n*colunaNormal() finalizada.-----------------------------\n");
        
    }
    
    private void colunaInvertida(char[][] m, String palavra){
        
        System.out.println("*colunaInvertida() iniciada.-----------------------------\n");
        
        StringBuilder aux = new StringBuilder(palavra);
	
        palavra = aux.reverse().toString();
		
	for (int i = 0; i < m[i].length; i++) {
            
            String colunaMatriz = converteColunaString(m, i);
            
            if(colunaMatriz.contains(palavra.toUpperCase())) {
                
                System.out.printf("**linhaMatriz(%d) contém: %s\n\n",i,palavra);
                
                int cComeco = colunaMatriz.indexOf(palavra.toUpperCase());
                
                insereSituacao(cComeco + palavra.length()-1, i, cComeco, i); 
                
                tipo.setText("Coluna Invertida");
                
                //System.out.println("\n*colunaInvertida() finalizada.-----------------------------\n");
		achou = true;
                break;
            
            } else {
                
                System.out.printf("Não foi encontrado [%s] em colunaMatriz(%d).\n", palavra, i);
                
            }
        }
        
        System.out.println("\n*colunaInvertida() finalizada.-----------------------------\n");
	
    }
    
    
    
    
    
    private void diagonalPrincipalNormal(char[][] m, String palavra) {
        
        System.out.println("*diagonalPrincipalNormal() iniciada.-----------------------------\n");

        palavra = palavra.toUpperCase();
        
        for (int i = 0; i < m.length; i++) {
            
            String linhaMatriz = converteLinhaString(m[i]);
            
            for (int j = 0; j < m[i].length; j++) {
                       
                if(linhaMatriz.charAt(j) == palavra.charAt(0)) {
                      
                    System.out.printf("**linhaMatriz(%d).charAt(%d) == palavra.charAt(0).\n",i,j);
                                           
                    String diagonal = converteDiagonalPrincipalString(m,i,j);
                  
                    System.out.printf("**diagonal convertida para: %s\n",diagonal);
                  
                    if (diagonal.startsWith(palavra)) {
                      
                        insereSituacao(i,j, i + palavra.length()-1, j + palavra.length()-1);
                        tipo.setText("Diagonal principal normal");
                        achou = true;
                        break;

                    } 
                    else {

                        System.out.printf("Não foi encontrado [%s] na diagonal.\n\n", palavra, j);

                    }

                } 
                  
            }
           
        }
        
        System.out.println("*diagonalPrincipalNormal() finalizada.-----------------------------\n");
        
    }
    
    private void diagonalPrincipalInvertida(char[][] m, String palavra) {
        
        System.out.println("*diagonalPrincipalInvertida() iniciada.-----------------------------\n");
        
        StringBuilder palavraInvertida = new StringBuilder(palavra);
        
        palavraInvertida.reverse();
           
        palavra = palavra.toUpperCase();
        
        for (int i = 0; i < m.length; i++) {
            
            String linhaMatriz = converteLinhaString(m[i]);
            
            for (int j = 0; j < m[i].length; j++) {
                       
                if(linhaMatriz.charAt(j) == palavra.charAt(palavra.length() - 1)) {
                    
                    System.out.printf("**linhaMatriz(%d).charAt(%d) == palavra.charAt(%d).\n",i,j,palavra.length() - 1);

                    String diagonal = converteDiagonalPrincipalString(m,i,j);

                    System.out.printf("**diagonal convertida para: %s\n",diagonal);

                    if (diagonal.startsWith(palavraInvertida.toString().toUpperCase())) {
                        
                        insereSituacao(i + palavra.length()-1,j + palavra.length()-1,i,j);

             
                        tipo.setText("Diagonal principal invertida");
                        //System.out.println("*diagonalPrincipalInvertida() finalizada.-----------------------------\n\n");
                        achou = true;
                        break;

                    } 
                    else {

                        System.out.printf("Não foi encontrado [%s] nessa diagonal.\n\n", palavraInvertida.toString().toUpperCase());

                    } 
                }
            }   
        }
        
        System.out.println("*diagonalPrincipalInvertida() finalizada.-----------------------------\n\n");
        
    }

    private void diagonalSecundariaNormal(char[][] m, String palavra) {
        
        System.out.println("*diagonalSecundariaNormal() iniciada.-----------------------------\n");
        
        for (int i = 0; i < m.length; i++) {
            
            String linhaMatriz = converteLinhaString(m[i]).toLowerCase();
            
            for (int j = 0; j < m[i].length; j++) {
                
                if (linhaMatriz.charAt(j) == palavra.charAt(0)) {
                    
                    System.out.printf("**linhaMatriz(%d).charAt(%d) == palavra.charAt(%d).\n",i,j,palavra.length() - 1);
          
                    String diagonal = converteDiagonalSecundariaString(m,palavra,i,j);
                    
                    System.out.printf("**diagonal convertida para: %s\n",diagonal);
                    
                    if (diagonal.startsWith(palavra.toString().toUpperCase())) {
                        
                        insereSituacao(i, j, i + palavra.length() - 1, j - (palavra.length() - 1));

                        //System.out.println("*diagonalSecundariaNormal() finalizada.-----------------------------\n\n");
                        tipo.setText("Diagonal secundária normal");
                        achou = true;
                        break;
                        
                    } else {
                    
                        System.out.printf("Não foi encontrado [%s] nessa diagonal.\n\n", palavra.toString().toUpperCase());
                
                    } 
                } 
                 
            }
        }
        
        System.out.println("*diagonalSecundariaNormal() finalizada.-----------------------------\n\n");
    
    }
    
    private void diagonalSecundariaInvertida(char[][] m, String palavra) {
        
        System.out.println("*diagonalSecundariaInvertida() iniciada.-----------------------------\n");
        
        StringBuilder aux = new StringBuilder(palavra);
	
        palavra = aux.reverse().toString();
        
        for (int i = 0; i < m.length; i++) {
            
            String linhaMatriz = converteLinhaString(m[i]).toLowerCase();
            
            for (int j = 0; j < m[i].length; j++) {
                
                if (linhaMatriz.charAt(j) == palavra.charAt(0)) {
                    
                    System.out.printf("**linhaMatriz(%d).charAt(%d) == palavra.charAt(%d).\n",i,j,palavra.length() - 1);
          
                    String diagonal = converteDiagonalSecundariaString(m,palavra,i,j);
                    
                    System.out.printf("**diagonal convertida para: %s\n",diagonal);
                    
                    if (diagonal.startsWith(palavra.toString().toUpperCase())) {
                        
                        insereSituacao(i + palavra.length() - 1, j - (palavra.length() - 1), i, j);
                  
                        //System.out.println("*diagonalSecundariaInvertida() finalizada.-----------------------------\n\n");
                        tipo.setText("Diagonal secundária invertida");
                        achou = true;
                        break;
                        
                    } else {
                    
                        System.out.printf("Não foi encontrado [%s] nessa diagonal.\n\n", palavra.toString().toUpperCase());
                
                    } 
                } 
                 
            }
        }
        
        System.out.println("*diagonalSecundariaInvertida() finalizada.-----------------------------\n\n");
        
    }
    
    
    
    /*********      PROCURA(S)      *********/    
    
    // PROCURA LINHA
    
    private void procuraLinhas() {
        
        System.out.println("*procuraLinhas() iniciada.\n");
        
        linhaNormal(m, busca.getText());
        
        linhaInvertida(m, busca.getText());
        
        
    }
    

    
    private void procuraColunas() {     
        
        
        System.out.println("*procuraColunas() iniciada.\n");
        
        colunaNormal(m, busca.getText());
        
        colunaInvertida(m, busca.getText());
        
    }
    
    private void procuraDiagonais() {
        
        System.out.println("*procuraDiagonais() iniciada.\n");
        
        diagonalPrincipalNormal(m, busca.getText());
        
        diagonalPrincipalInvertida(m, busca.getText());
        
        diagonalSecundariaNormal(m, busca.getText());
        
        diagonalSecundariaInvertida(m, busca.getText());
        
    }



   
    
    private void comecaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comecaActionPerformed
            
        if("Aguardando caça-palavras...".equals(l.getText())){
            
            imprimeMatriz();
            
            comeca.setVisible(false);
            lvl.setVisible(false);
            
            busca.setVisible(true);
            buscar.setVisible(true);
            b.setVisible(true);
            btnDesistir.setVisible(true);
            
        }    
    }//GEN-LAST:event_comecaActionPerformed

    
    
    private void setNada(){
        tipo.setVisible(false);
        linhaC.setText("Linha: - ");
        linhaF.setText("Linha: - ");
        colunaC.setText("Coluna: - ");
        colunaF.setText("Coluna: - ");
    }
    
    private void setSituacao(){
        linhaC.setText("Linha: ".concat(Integer.toString(linhaComeco)));
        linhaF.setText("Linha: ".concat(Integer.toString(linhaFim)));
        colunaC.setText("Coluna: ".concat(Integer.toString(colunaComeco)));
        colunaF.setText("Coluna: ".concat(Integer.toString(colunaFim)));
    }
    
    
    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        comeco.setVisible(true);
        fim.setVisible(true);
        linhaC.setVisible(true);
        linhaF.setVisible(true);
        colunaC.setVisible(true);
        colunaF.setVisible(true);
       
        setNada();
        // NÍVEL GOIABINHA
        if(!busca.getText().equals("")){
            procuraLinhas();

            // NÍVEL GOIABINHA MASTER

            if(lvl.getSelectedItem().equals("2- Goiabinha master")) procuraColunas();

            // NÍVEL DANIEL

            else if (lvl.getSelectedItem().equals("3- Daniel")) {

                procuraColunas();

                procuraDiagonais();      

            }
            
            if(achou){
                tipo.setVisible(true);
                setSituacao();
            }
            achou = false;
        }
        
        //imprimeMatrizFinal();
    }//GEN-LAST:event_buscarActionPerformed

    
    
    
    
    private void lvlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lvlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lvlActionPerformed

    private void btnDesistirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesistirActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,"Bucho!");
        System.exit(0);
    }//GEN-LAST:event_btnDesistirActionPerformed
   
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CacaPalavra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CacaPalavra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CacaPalavra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CacaPalavra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CacaPalavra().setVisible(true);
            }
        });
    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel b;
    private javax.swing.JButton btnDesistir;
    private javax.swing.JTextField busca;
    private javax.swing.JButton buscar;
    private javax.swing.JLabel colunaC;
    private javax.swing.JLabel colunaF;
    private javax.swing.JButton comeca;
    private javax.swing.JLabel comeco;
    private javax.swing.JLabel creditos;
    private javax.swing.JLabel fim;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea l;
    private javax.swing.JLabel linhaC;
    private javax.swing.JLabel linhaF;
    private javax.swing.JComboBox<String> lvl;
    private javax.swing.JLabel tipo;
    // End of variables declaration//GEN-END:variables
}
